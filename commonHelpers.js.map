{"version":3,"file":"commonHelpers.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["import axios from 'axios';\n\nexport async function fetchGallery(query, page) {\n  const BASE_URL = 'https://pixabay.com';\n  const END_POINT = '/api/';\n  const KEY_API = '?key=43226276-a07a0c17e428cfffb021b9b05';\n  const PARAMS = `&q=${query}&image_type=photo&orientation=horizontal&safesearch=true&per_page=15&page=${page}`;\n\n  const url = BASE_URL + END_POINT + KEY_API + PARAMS;\n\n  const res = await axios.get(url);\n  return res.data;\n}\n\n// import axios from 'axios';: Эта строка импортирует библиотеку Axios, которая используется для совершения HTTP запросов.\n\n//     export async function fetchGallery(query, page) {: Это объявление функции fetchGallery, которая экспортируется из модуля.\n// Она асинхронная(async), что позволяет использовать ключевое слово await внутри неё для ожидания завершения асинхронных операций.\n\n//     const BASE_URL = 'https://pixabay.com';: Это базовый URL для API сервиса Pixabay, к которому будет отправлен запрос.\n\n//     const END_POINT = '/api/';: Это конечная точка (endpoint) API сервиса Pixabay, к которой будет отправлен запрос.\n\n//     const KEY_API = '?key=43226276-a07a0c17e428cfffb021b9b05';: Это ключ API, который используется для аутентификации запроса к API Pixabay.\n\n// //     const PARAMS = &q=${query}&image_type=photo&orientation=horizontal&safesearch=true&per_page=15&page=${page};:\n//\n//  Это строка параметров запроса, которая включает в себя поисковый запрос(query), тип изображения(image_type), ориентацию изображения(orientation), безопасный поиск(safesearch), количество изображений на странице(per_page) и номер страницы(page).\n\n//  Все эти параметры будут использованы для формирования URL запроса к API Pixabay.\n\n//     const url = BASE_URL + END_POINT + KEY_API + PARAMS;: Здесь формируется полный URL для отправки запроса к API Pixabay, объединяя базовый URL, конечную точку, ключ API и параметры запроса.\n\n//     const res = await axios.get(url);: С помощью Axios отправляется GET запрос по сформированному URL к API Pixabay. Ключевое слово await указывает на ожидание завершения запроса перед продолжением выполнения кода.\n\n//     return res.data;: Функция возвращает данные, полученные в ответ на запрос к API Pixabay. res.data содержит тело ответа, которое, вероятно, представляет собой JSON объект с результатами запроса (например, массив изображений).\n\n// Таким образом, функция fetchGallery отправляет запрос к API Pixabay для получения галереи изображений на основе заданного поискового запроса и номера страницы, а затем возвращает полученные данные.\n","import SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nexport const galleryEl = document.querySelector('.gallery');\n\nexport function imageTemplate(data) {\n  const markup = data.hits\n    .map(\n      ({\n        webformatURL,\n        largeImageURL,\n        tags,\n        likes,\n        views,\n        comments,\n        downloads,\n      }) => {\n        return `<li class=\"gallery-item\">\n                <a class=\"gallery-link\" href=\"${largeImageURL}\">\n                <img class=\"gallery-img\" src=\"${webformatURL}\" alt=\"${tags}\">\n                <div class=\"image-description\">\n                <p>Likes: ${likes}</p>\n                <p>Views: ${views}</p>\n                <p>Comments ${comments}</p>\n                <p>Downloads ${downloads}</p>\n                </div>\n                </a>\n                </li>`;\n      }\n    )\n\n    .join('');\n  galleryEl.insertAdjacentHTML('beforeend', markup);\n\n  const lightbox = new SimpleLightbox('.gallery a', {\n    captions: true,\n    captionDelay: 250,\n    captionsData: 'alt',\n    captionPosition: 'bottom',\n  });\n  lightbox.refresh();\n}\n\n\n\n\n\n\n//     import SimpleLightbox from 'simplelightbox';: Эта строка импортирует класс SimpleLightbox из библиотеки SimpleLightbox.\n\n//     import 'simplelightbox/dist/simple-lightbox.min.css';: Эта строка импортирует CSS стили для SimpleLightbox из файла simple-lightbox.min.css.\n\n// export const galleryEl = document.querySelector('.gallery');: Это объявление константы galleryEl, которая представляет DOM элемент с классом gallery. \n    \n// Она экспортируется для использования в других модулях.\n\n// export function imageTemplate(data) {: Это объявление функции imageTemplate, которая принимает объект data в качестве аргумента. \n      \n//   Функция используется для создания HTML разметки для изображений и их вставки в галерею.\n\n//     Внутри функции imageTemplate используется метод map для обхода массива изображений(data.hits), предположительно полученных из API Pixabay. \n    \n//     Каждый элемент массива представляет из себя объект с различными свойствами, такими как webformatURL, largeImageURL, tags, likes, views, comments, downloads.\n\n//     В цикле map для каждого изображения создается HTML разметка, включающая ссылку на полноразмерное изображение(largeImageURL),\n    \n//     превью изображения(webformatURL), описание изображения(tags), количество лайков(likes), количество просмотров(views), количество комментариев(comments) и количество загрузок(downloads).\n\n//     Созданная HTML разметка сохраняется в переменной markup.\n\n//     galleryEl.insertAdjacentHTML('beforeend', markup);: С помощью метода insertAdjacentHTML созданная HTML разметка вставляется внутрь элемента galleryEl, который был найден в начале скрипта.\n\n//   const lightbox = new SimpleLightbox('.gallery a', { /* настройки */ });: Создается новый экземпляр SimpleLightbox, который применяется ко всем ссылкам внутри элемента с классом gallery. \n    \n//   Это позволяет создавать модальное окно с изображением при клике на любую ссылку в галерее.\n\n//     Настройки SimpleLightbox передаются в виде объекта со свойствами, такими как captions, captionDelay, captionsData, captionPosition.\n    \n//     Они определяют различные аспекты поведения и отображения модального окна с изображением.\n\n//     lightbox.refresh();: Этот метод вызывается для обновления галереи после добавления новых изображений.","import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nimport { fetchGallery } from './js/pixabay-api';\nimport { imageTemplate } from './js/render-functions';\nimport { galleryEl } from './js/render-functions';\n\nconst formEl = document.querySelector('.img-search-form');\nconst loaderEl = document.querySelector('.loader');\nconst btnLoadMore = document.querySelector('.load-more-btn');\n\nlet query;\nlet page;\nlet maxPage;\n\nformEl.addEventListener('submit', onFormSubmit);\nbtnLoadMore.addEventListener('click', onLoadMoreClick);\n\nasync function onFormSubmit(e) {\n  e.preventDefault();\n  hideLoadBtn();\n  galleryEl.innerHTML = '';\n  query = e.target.elements.query.value.trim();\n  page = 1;\n\n  if (query === '') {\n    showError('Sorry, there are no search terms entered. Please try again!');\n    return;\n  }\n  showLoaderEl();\n  try {\n    const data = await fetchGallery(query, page);\n    maxPage = Math.ceil(data.totalHits / 15);\n    if (data.totalHits === 0) {\n      hideLoaderEl();\n      showError(\n        'Sorry, there are no images matching your search query. Please try again!'\n      );\n      return;\n    }\n    imageTemplate(data);\n  } catch (err) {\n    showError(err);\n  }\n\n  hideLoaderEl();\n  checkBtnVisibleStatus();\n  e.target.reset();\n}\n\nasync function onLoadMoreClick() {\n  page += 1;\n  showLoaderEl();\n\n  try {\n    const data = await fetchGallery(query, page);\n    imageTemplate(data);\n  } catch (err) {\n    showError(err);\n  }\n\n  hideLoaderEl();\n  checkBtnVisibleStatus();\n\n  const height = galleryEl.firstElementChild.getBoundingClientRect().height;\n\n  scrollBy({\n    behavior: 'smooth',\n    top: height * 2,\n  });\n}\n\nfunction showLoadBtn() {\n  btnLoadMore.classList.remove('hidden');\n}\n\nfunction hideLoadBtn() {\n  btnLoadMore.classList.add('hidden');\n}\n\nfunction showLoaderEl() {\n  loaderEl.classList.remove('hidden');\n}\n\nfunction hideLoaderEl() {\n  loaderEl.classList.add('hidden');\n}\n\nfunction showError(msg) {\n  iziToast.error({\n    message: msg,\n    messageColor: 'white',\n    backgroundColor: 'red',\n    position: 'topRight',\n  });\n}\n\nfunction checkBtnVisibleStatus() {\n  if (page >= maxPage) {\n    hideLoadBtn();\n    showError(\"We're sorry, but you've reached the end of search results.\");\n  } else {\n    showLoadBtn();\n  }\n}\n\n//     Импорт библиотек:\n//         iziToast: Библиотека для вывода всплывающих уведомлений.\n//         izitoast/dist/css/iziToast.min.css: Стилевой файл для iziToast, который определяет внешний вид всплывающих уведомлений.\n//         fetchGallery и imageTemplate из ./js/pixabay-api и ./js/render-functions: Функции для получения данных изображений из API Pixabay и создания HTML разметки для отображения изображений в галерее.\n\n//     Объявление переменных:\n//         formEl, loaderEl, btnLoadMore: Элементы DOM для формы поиска, индикатора загрузки и кнопки \"Загрузить еще\".\n//         query, page, maxPage: Переменные для хранения текущего поискового запроса, текущей страницы результатов и максимального числа страниц результатов.\n\n//     Обработчики событий:\n//         formEl.addEventListener('submit', onFormSubmit): Добавляет обработчик события отправки формы поиска, который вызывает функцию onFormSubmit.\n//         btnLoadMore.addEventListener('click', onLoadMoreClick): Добавляет обработчик события клика на кнопку \"Загрузить еще\", который вызывает функцию onLoadMoreClick.\n\n//     Функция onFormSubmit:\n//         Предотвращает стандартное поведение формы (перезагрузку страницы).\n//         Получает значение поискового запроса из формы.\n//         Очищает галерею от предыдущих результатов.\n//         Отправляет запрос к API Pixabay с указанным поисковым запросом и текущей страницей.\n//         Обрабатывает полученные данные: определяет максимальное количество страниц результатов, проверяет наличие результатов и отображает их в галерее.\n//         Показывает или скрывает кнопку \"Загрузить еще\" в зависимости от количества доступных страниц результатов.\n\n//     Функция onLoadMoreClick:\n//         Увеличивает номер текущей страницы на единицу.\n//         Отправляет запрос к API Pixabay для загрузки следующей страницы результатов.\n//         Отображает новые результаты в галерее.\n//         Показывает или скрывает кнопку \"Загрузить еще\" в зависимости от количества доступных страниц результатов.\n//         Прокручивает страницу вниз, чтобы пользователь увидел новые изображения.\n\n//     Вспомогательные функции:\n//         showLoadBtn, hideLoadBtn: Показывает и скрывает кнопку \"Загрузить еще\".\n//         showLoaderEl, hideLoaderEl: Показывает и скрывает индикатор загрузки.\n//         showError: Выводит сообщение об ошибке с помощью библиотеки iziToast.\n//         checkBtnVisibleStatus: Проверяет, нужно ли показывать кнопку \"Загрузить еще\" на основе текущего номера страницы и максимального количества страниц.\n\n// Таким образом, весь код составляет простую систему для поиска и загрузки изображений из API Pixabay, с учетом удобного интерфейса для пользователя и обработки возможных ошибок.\n"],"names":["fetchGallery","query","page","BASE_URL","END_POINT","KEY_API","PARAMS","url","axios","galleryEl","imageTemplate","data","markup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","SimpleLightbox","formEl","loaderEl","btnLoadMore","maxPage","onFormSubmit","onLoadMoreClick","e","hideLoadBtn","showError","showLoaderEl","hideLoaderEl","err","checkBtnVisibleStatus","height","showLoadBtn","msg","iziToast"],"mappings":"owBAEO,eAAeA,EAAaC,EAAOC,EAAM,CAC9C,MAAMC,EAAW,sBACXC,EAAY,QACZC,EAAU,0CACVC,EAAS,MAAML,CAAK,6EAA6EC,CAAI,GAErGK,EAAMJ,EAAWC,EAAYC,EAAUC,EAG7C,OADY,MAAME,EAAM,IAAID,CAAG,GACpB,IACb,CCTO,MAAME,EAAY,SAAS,cAAc,UAAU,EAEnD,SAASC,EAAcC,EAAM,CAClC,MAAMC,EAASD,EAAK,KACjB,IACC,CAAC,CACC,aAAAE,EACA,cAAAC,EACA,KAAAC,EACA,MAAAC,EACA,MAAAC,EACA,SAAAC,EACA,UAAAC,CACR,IACe;AAAA,gDACiCL,CAAa;AAAA,gDACbD,CAAY,UAAUE,CAAI;AAAA;AAAA,4BAE9CC,CAAK;AAAA,4BACLC,CAAK;AAAA,8BACHC,CAAQ;AAAA,+BACPC,CAAS;AAAA;AAAA;AAAA,sBAKnC,EAEA,KAAK,EAAE,EACVV,EAAU,mBAAmB,YAAaG,CAAM,EAE/B,IAAIQ,EAAe,aAAc,CAChD,SAAU,GACV,aAAc,IACd,aAAc,MACd,gBAAiB,QACrB,CAAG,EACQ,QAAO,CAClB,CClCA,MAAMC,EAAS,SAAS,cAAc,kBAAkB,EAClDC,EAAW,SAAS,cAAc,SAAS,EAC3CC,EAAc,SAAS,cAAc,gBAAgB,EAE3D,IAAItB,EACAC,EACAsB,EAEJH,EAAO,iBAAiB,SAAUI,CAAY,EAC9CF,EAAY,iBAAiB,QAASG,CAAe,EAErD,eAAeD,EAAaE,EAAG,CAO7B,GANAA,EAAE,eAAc,EAChBC,IACAnB,EAAU,UAAY,GACtBR,EAAQ0B,EAAE,OAAO,SAAS,MAAM,MAAM,OACtCzB,EAAO,EAEHD,IAAU,GAAI,CAChB4B,EAAU,6DAA6D,EACvE,MACD,CACDC,IACA,GAAI,CACF,MAAMnB,EAAO,MAAMX,EAAaC,EAAOC,CAAI,EAE3C,GADAsB,EAAU,KAAK,KAAKb,EAAK,UAAY,EAAE,EACnCA,EAAK,YAAc,EAAG,CACxBoB,IACAF,EACE,0EACR,EACM,MACD,CACDnB,EAAcC,CAAI,CACnB,OAAQqB,EAAK,CACZH,EAAUG,CAAG,CACd,CAEDD,IACAE,IACAN,EAAE,OAAO,OACX,CAEA,eAAeD,GAAkB,CAC/BxB,GAAQ,EACR4B,IAEA,GAAI,CACF,MAAMnB,EAAO,MAAMX,EAAaC,EAAOC,CAAI,EAC3CQ,EAAcC,CAAI,CACnB,OAAQqB,EAAK,CACZH,EAAUG,CAAG,CACd,CAEDD,IACAE,IAEA,MAAMC,EAASzB,EAAU,kBAAkB,sBAAqB,EAAG,OAEnE,SAAS,CACP,SAAU,SACV,IAAKyB,EAAS,CAClB,CAAG,CACH,CAEA,SAASC,GAAc,CACrBZ,EAAY,UAAU,OAAO,QAAQ,CACvC,CAEA,SAASK,GAAc,CACrBL,EAAY,UAAU,IAAI,QAAQ,CACpC,CAEA,SAASO,GAAe,CACtBR,EAAS,UAAU,OAAO,QAAQ,CACpC,CAEA,SAASS,GAAe,CACtBT,EAAS,UAAU,IAAI,QAAQ,CACjC,CAEA,SAASO,EAAUO,EAAK,CACtBC,EAAS,MAAM,CACb,QAASD,EACT,aAAc,QACd,gBAAiB,MACjB,SAAU,UACd,CAAG,CACH,CAEA,SAASH,GAAwB,CAC3B/B,GAAQsB,GACVI,IACAC,EAAU,4DAA4D,GAEtEM,GAEJ"}